version: "3.8"

services:
    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile.backend
        working_dir: /app
        ports:
            - "${PORT_BACKEND}:${PORT_BACKEND}"
        environment:
            - NODE_ENV=${NODE_ENV}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_NAME=${DB_NAME}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - JWT_SECRET=${JWT_SECRET}
            - PORT=${PORT_BACKEND}
            - EMAIL=${EMAIL}
            - MAILJET_API_KEY=${MAILJET_API_KEY}
            - MAILJET_SECRET_KEY=${MAILJET_SECRET_KEY}
            - DATABASE_VERSION=${DATABASE_VERSION}
            - ORIGIN_URL=${ORIGIN_URL}
            - SERVER_URL=${SERVER_URL}
        depends_on:
            - db
        command: ["npm", "start"]

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile.frontend
        ports:
            - "${PORT_FRONTEND}:80"
        environment:
            - NODE_ENV=${NODE_ENV}
            - SERVER_URL=${SERVER_URL}
            - ORIGIN_URL=${ORIGIN_URL}
        command: ["npm", "start"]

    db:
        image: postgres:13
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_NAME}
        ports:
            - "${DB_PORT}:${DB_PORT}"
        volumes:
            # stocker les données de la base de données dans un volume
            - pgdata:/var/lib/postgresql/data
            - ./database_script.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
            interval: 10s
            timeout: 5s
            retries: 5
        command: ["postgres", "-c", "fsync=off"]

volumes:
    pgdata:
